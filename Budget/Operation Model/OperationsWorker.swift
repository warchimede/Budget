//
//  OperationWorker.swift
//  Budget
//
//  Created by William ArchimÃ¨de on 27/07/2017.
//  Copyright (c) 2017 William Archimede. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class OperationsWorker {
    var operationsStore: OperationsStoreProtocol

    init(operationsStore: OperationsStoreProtocol) {
        self.operationsStore = operationsStore
    }

    func fetchAll(completion: @escaping ([Operation]) -> Void) {
        operationsStore.fetchAll { operations, _ in // Not handling errors for now.
            completion(operations ?? [])
        }
    }

    func create(_ operation: Operation, completion: @escaping (OperationsStoreError?) -> Void) {
        operationsStore.create(operation, completion: completion)
    }

    func delete(_ operation: Operation, completion: @escaping (OperationsStoreError?) -> Void) {
        operationsStore.delete(operation, completion: completion)
    }
}

protocol OperationsStoreProtocol {
    func fetchAll(completion: @escaping ([Operation]?, OperationsStoreError?) -> Void)
    func create(_ operation: Operation, completion: @escaping (OperationsStoreError?) -> Void)
    func delete(_ operation: Operation, completion: @escaping (OperationsStoreError?) -> Void)
}

enum OperationsStoreError: Error {
    case cannotFetch(String)
    case cannotCreate(String)
    case cannotDelete(String)
}
